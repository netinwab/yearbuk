I want to add a secure password change system to the Security Settings tab for both School and Viewer accounts.

The flow should be identical to how modern platforms like Instagram or GitHub handle it — with email verification before changing the password.


---

⚙️ 1️⃣ User Flow (Frontend)

Inside the Security Settings card:

Add a “Change Password” section with a button labeled “Request Password Change”.

When clicked:

The system sends a password reset email to the account’s registered email address.

Display a small info message like:

> “We’ve sent a password reset link to your email. Please check your inbox to continue.”






---

📧 2️⃣ Email Sending (Backend)

Use the same Resend setup already implemented for email verification.

Subject: Reset Your Waibuk Password

From: onboarding@resend.dev (or your verified domain email when available)

Email content should include:

A message like:

> “We received a request to change your password for your Waibuk account. Click the button below to continue.”



A button or link that takes them to a dedicated Reset Password page, e.g.:

https://your-domain.com/reset-password/:token

The token should be a secure, temporary code stored in the database with:

user_id

token

expires_at (e.g. 30 minutes validity)





---

🔒 3️⃣ Password Reset Page (Frontend)

The page /reset-password/:token should:

Verify the token with the backend.

If valid, display a form:

New Password

Confirm Password

Submit button


If invalid or expired, show a message:

> “This reset link is invalid or has expired. Please request a new one.”






---

🧠 4️⃣ Backend Logic

Create a new API route:
POST /api/auth/request-password-reset
→ Accepts email, generates token, stores it in password_reset_tokens table, and sends email.

Another route:
POST /api/auth/reset-password
→ Accepts { token, newPassword }
→ Validates token and expiry → Updates the user’s password (hash with bcrypt) → Deletes or invalidates the token after use.



---

💽 5️⃣ Database

Create a new table (or Drizzle schema):

password_reset_tokens: {
  id: uuid,
  user_id: uuid (foreign key),
  token: string,
  expires_at: timestamp,
  created_at: timestamp
}


---

🧩 6️⃣ Security & Usability Notes

Hash all tokens before storing (never store raw tokens).

Tokens expire automatically after 30 minutes.

After successful password reset, send a confirmation email:

> “Your Waibuk password was successfully changed. If you didn’t make this change, contact support immediately.”



Prevent reuse of expired tokens.

For consistency, use the same Resend sandbox setup for testing until the domain is verified.



---

✅ 7️⃣ Frontend Placement

Add this system to the Security tab in both:

/viewer-settings/security

/school-settings/security


The UI design should match existing app cards — clean, consistent, and responsive.



---

🧩 Goal:
Allow users (both school and viewer) to securely change their password through email verification, ensuring the process is smooth, modern, and safe — exactly how top-tier web apps do it.